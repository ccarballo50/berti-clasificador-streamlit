import streamlit as st
import pandas as pd
import os
import base64
from enriquecedor_clinico import enriquecer_anamnesis, score_tipicidad, clasificacion_angina


st.set_page_config(page_title="BERTI - Clasificador Cl√≠nico", layout="wide")
st.title("ü©∫ BERTI - Clasificador de Dolor Tor√°cico")
st.markdown("Introduzca la anamnesis cl√≠nica para an√°lisis automatizado:")

texto_input = st.text_area("‚úçÔ∏è Anamnesis cl√≠nica:", height=200)

if 'casos' not in st.session_state:
    st.session_state['casos'] = []

if st.button("üîç Analizar anamnesis"):
    enriquecido, resumen = enriquecer_anamnesis(texto_input)
    score = score_tipicidad(resumen)
    clasificacion = clasificacion_angina(score)

    st.markdown("### ‚úÖ Resultado del an√°lisis cl√≠nico")
    st.markdown("**Texto enriquecido:**")
    st.code(enriquecido)
    st.markdown(f"**Score de tipicidad cl√≠nica:** {score}")
    st.markdown(f"**Clasificaci√≥n SEC:** {clasificacion.upper()}")

    st.markdown("### üß† Variables cl√≠nicas detectadas")
    for var, val in resumen.items():
        st.markdown(f"- **{var}**: {val}")

    # Preguntas asistidas
    st.markdown("### ‚ùì Preguntas asistidas por BERTI para completar diagn√≥stico")
    preguntas = {
        "tipo_dolor": "¬øQu√© tipo de dolor presenta el paciente (opresivo, ardor, punzante...)?",
        "duracion": "¬øCu√°l fue la duraci√≥n del episodio (minutos, horas, segundos)?",
        "inicio_dolor": "¬øFue un inicio s√∫bito o gradual?",
        "disnea": "¬øPresentaba disnea o dificultad respiratoria?",
        "sudoracion": "¬øHubo sudoraci√≥n acompa√±ante?",
        "vomitos": "¬øAparecieron n√°useas o v√≥mitos?",
        "alivio_con_reposo": "¬øEl dolor ced√≠a con el reposo?",
        "relacion_con_esfuerzo": "¬øEl dolor se desencaden√≥ con esfuerzo f√≠sico?",
        "similitud_dolor_previo_isquemico": "¬øSe parece a alg√∫n dolor previo como un IAM o problema card√≠aco anterior?",
        "grace_edad": "¬øEdad del paciente?",
        "grace_fc": "¬øFrecuencia card√≠aca?",
        "grace_pas": "¬øPresi√≥n arterial sist√≥lica?",
        "grace_creatinina": "¬øNivel de creatinina?",
        "grace_clase_killip": "¬øClase Killip del paciente?",
        "grace_sca_elevacion": "¬øElevaci√≥n del ST?",
        "grace_biomarcadores": "¬øBiomarcadores positivos?",
        "timi_factores_riesgo": "¬øTiene factores de riesgo cardiovascular?",
        "timi_asa_ultimos7dias": "¬øToma de aspirina en los √∫ltimos 7 d√≠as?",
        "timi_angina_severa": "¬øHa tenido angina severa en las √∫ltimas 24h?",
        "timi_st_elevacion": "¬øAlteraciones del ST actuales?",
        "timi_biomarcadores": "¬øBiomarcadores positivos?"
    }

    respuestas = {}
    for clave, pregunta in preguntas.items():
        if clave not in resumen or resumen[clave] == "no mencionado":
            respuestas[clave] = st.radio(pregunta, ["NO", "SI", "NO LO SABE"], key=clave)

    # Guardar caso en sesi√≥n
    caso = {
        "anamnesis": texto_input,
        "enriquecido": enriquecido,
        "score": score,
        "clasificacion_sec": clasificacion,
        "resumen": resumen,
        "respuestas": respuestas
    }
    st.session_state['casos'].append(caso)
    st.success("‚úÖ Caso guardado correctamente en la sesi√≥n.")

# Mostrar casos acumulados
st.markdown("### üìä Casos acumulados en esta sesi√≥n")
if len(st.session_state['casos']) > 0:
    df = pd.DataFrame([{**c['resumen'], **{"Anamnesis": c['anamnesis'], "Texto enriquecido": c['enriquecido'], "Score": c['score'], "Clasificaci√≥n SEC": c['clasificacion_sec'], **c['respuestas']}} for c in st.session_state['casos']])
    st.dataframe(df)

    # Exportar Excel
    nombre_archivo = "berticasos_output.xlsx"
    if st.button("üì§ Exportar todos los casos a Excel"):
        df.to_excel(nombre_archivo, index=False)
        with open(nombre_archivo, "rb") as f:
            st.download_button("‚¨áÔ∏è Descargar archivo Excel", f, file_name=nombre_archivo)
else:
    st.info("A√∫n no hay casos acumulados. Analiza primero una anamnesis.")

