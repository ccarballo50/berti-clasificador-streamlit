import streamlit as st
import pandas as pd
import os
import base64
from enriquecedor_clinico import enriquecer_anamnesis, score_tipicidad, clasificacion_angina


st.set_page_config(page_title="Clasificador BERTI", layout="centered")
st.title("ü©∫ Clasificaci√≥n cl√≠nica asistida - BERTI")

st.markdown(
    """
    Para la clasificaci√≥n de riesgo de este paciente, se considera que las enzimas han sido normales, y que no hay alteraci√≥n electrocardiogr√°fica sugerente de isquemia aguda.
    """
)

texto_input = st.text_area("Introduce la anamnesis cl√≠nica:")
if 'casos_acumulados' not in st.session_state:
    st.session_state.casos_acumulados = []

if st.button("üîç Analizar anamnesis"):
    if texto_input:
        enriquecido, resumen = enriquecer_anamnesis(texto_input)
        score = score_tipicidad(resumen)
        clasificacion = clasificacion_angina(score)

        st.markdown("## ‚úÖ Resultado del an√°lisis cl√≠nico")
        st.markdown("**Texto enriquecido:**")
        st.code(enriquecido)
        st.markdown(f"**Score de tipicidad cl√≠nica:** {score}")
        st.markdown(f"**Clasificaci√≥n SEC:** {clasificacion.upper()}")

        st.markdown("## üß† Variables cl√≠nicas detectadas")
        for var, valor in resumen.items():
            st.markdown(f"- **{var}**: {valor}")

        # Preguntas asistidas si faltan variables importantes
        st.markdown("## ‚ùì Preguntas asistidas por BERTI para completar diagn√≥stico")
        st.info("Para emitir un diagn√≥stico m√°s preciso, BERTI sugiere preguntar al m√©dico cl√≠nico:")

        preguntas = {
            "tipo_dolor": "¬øCu√°l es el tipo de dolor (opresivo, ardor, punzante...)?",
            "localizacion_dolor": "¬øD√≥nde se localiza el dolor (pecho, precordial, epigastrio...)?",
            "similitud_dolor_previo_isquemico": "¬øSe parece a alg√∫n dolor previo como un IAM o problema card√≠aco anterior?",
            "disnea": "¬øPresenta disnea o dificultad respiratoria?",
            "sudoracion": "¬øHubo cortejo vegetativo (n√°useas, v√≥mitos o sudoraci√≥n)?",
            "duracion": "¬øCu√°l fue la duraci√≥n del episodio (minutos, horas, segundos)?",
            "factores_riesgo": "¬øPresenta factores de riesgo cardiovascular relevantes? (HTA, DM, dislipemia, tabaquismo, CI previa)"
        }

        respuestas = {}
        for var, pregunta in preguntas.items():
            if resumen.get(var) == "no mencionado":
                respuestas[var] = st.radio(pregunta, ["No contestado", "S√≠", "No", "No lo sabe"], key=var)

        # Bot√≥n final para mostrar la conclusi√≥n
        if st.button("üí° Mostrar clasificaci√≥n final BERTI"):
            st.markdown("### üßæ Conclusiones cl√≠nicas finales")
            st.markdown(f"**Clasificaci√≥n SEC (texto + preguntas):** {clasificacion.upper()}")
            st.markdown(f"**Score tipicidad ajustado:** {score}")
            for var, resp in respuestas.items():
                st.markdown(f"- **{var}**: {resp}")

        # Acumular caso para exportaci√≥n
        caso = {
            "anamnesis": texto_input,
            "texto_enriquecido": enriquecido,
            "score": score,
            "clasificacion_sec": clasificacion,
        }
        caso.update(resumen)
        st.session_state.casos_acumulados.append(caso)

# Exportar casos acumulados
st.markdown("---")
st.markdown("## üìä Casos acumulados en esta sesi√≥n")
if len(st.session_state.casos_acumulados) > 0:
    df_export = pd.DataFrame(st.session_state.casos_acumulados)
    st.dataframe(df_export)
    nombre_archivo = "berticasos_exportados.xlsx"
    df_export.to_excel(nombre_archivo, index=False)
    with open(nombre_archivo, "rb") as f:
        st.download_button("‚¨áÔ∏è Exportar todos los casos a Excel", f, file_name=nombre_archivo)
else:
    st.info("A√∫n no hay casos acumulados. Analiza primero una anamnesis.")

